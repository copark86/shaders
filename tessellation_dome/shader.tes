#version 430 core

#define PI 3.141592653589

layout (triangles, equal_spacing) in;

uniform mat4 vMVP;
uniform int vPass;

in TCS_OUT
{
    vec2 texCoord;
    vec3 normal;
} tcs_out[];

out TES_OUT
{
    smooth vec3 vertex;
    smooth vec2 texCoord;
    smooth vec3 normal;
} tes_out;

/***************/
float sinCosRestrain(in float v)
{
    return max(-1.0, min(1.0, v));
}

/***************/
vec4 toSphere(in vec4 v)
{
    float val;
    vec4 o = vec4(1.0);

    float r = sqrt(pow(v.x, 2.0) + pow(v.y, 2.0) + pow(v.z, 2.0));
    val = max(-1.0, min(1.0, v.z / r));
    float theta = acos(val);

    float phi;
    val = v.x / (r * sin(theta));
    float first = acos(sinCosRestrain(val));
    val = v.y / (r * sin(theta));
    float second = asin(sinCosRestrain(val));
    if (second >= 0.0)
        phi = first;
    else
        phi = 2.0*PI - first;

    o.x = theta * cos(phi);
    o.y = theta * sin(phi);
    o.y /= PI / 2.0;
    o.x /= PI / 2.0;

    return o;
}

/*************/
void main(void)
{
    vec4 vertex = (gl_TessCoord.x * gl_in[0].gl_Position) +
                  (gl_TessCoord.y * gl_in[1].gl_Position) +
                  (gl_TessCoord.z * gl_in[2].gl_Position);
    vertex.z = 1.0;

    if (vPass == 0)
    {
        gl_Position = toSphere(vertex);

        tes_out.vertex = (vMVP * vertex).xyz;
    }
    else
    {
        gl_Position = vMVP * vertex;
        gl_Position = gl_Position / gl_Position.w;
    }

    tes_out.texCoord = (gl_TessCoord.x * tcs_out[0].texCoord) +
                       (gl_TessCoord.y * tcs_out[1].texCoord) +
                       (gl_TessCoord.z * tcs_out[2].texCoord);

}

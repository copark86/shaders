#version 430 core

layout (vertices = 3) out;

uniform vec4 vMVP;
uniform int vPass;

in VS_OUT
{
    vec2 texCoord;
    vec3 normal;
} tcs_in[];

out TCS_OUT
{
    vec2 texCoord;
    vec3 normal;
} tcs_out[];

void main(void)
{
    if (gl_InvocationID == 0)
    {
        if (vPass == 0)
        {
            vec4 p0 = gl_in[0].gl_Position;
            vec4 p1 = gl_in[1].gl_Position;
            vec4 p2 = gl_in[2].gl_Position;

            float l1 = length(p0 - p1);
            float l2 = length(p1 - p2);
            float l3 = length(p2 - p0);

            float d1 = length((p0 + p1) / 2.0);
            float d2 = length((p1 + p2) / 2.0);
            float d3 = length((p2 + p0) / 2.0);

            vec4 center = (p0 + p1 + p2) / 3.0;
            float faceDistance = length(center);

            gl_TessLevelInner[0] = 3.0 / (faceDistance / (l1 + l2 + l3));
            gl_TessLevelOuter[0] = 8.0 / (d2 / l2); //length((p1 + p2) / 2.0);
            gl_TessLevelOuter[1] = 8.0 / (d3 / l3); //length((p2 + p0) / 2.0);
            gl_TessLevelOuter[2] = 8.0 / (d1 / l1); //length((p0 + p1) / 2.0);
        }
        else
        {
            gl_TessLevelInner[0] = 1.0;
            gl_TessLevelOuter[0] = 1.0;
            gl_TessLevelOuter[1] = 1.0;
            gl_TessLevelOuter[2] = 1.0;
        }
    }

    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
    tcs_out[gl_InvocationID].texCoord = tcs_in[gl_InvocationID].texCoord;
    tcs_out[gl_InvocationID].normal = tcs_in[gl_InvocationID].normal;
}

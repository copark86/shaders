#version 430 core

#define PI 3.141592653589
#define FOV 210

layout (vertices = 3) out;

uniform vec4 vMVP;
uniform int vPass;

in VS_OUT
{
    vec2 texCoord;
    vec3 normal;
} tcs_in[];

out TCS_OUT
{
    vec2 texCoord;
    vec3 normal;
} tcs_out[];

/***************/
bool isVisible(in vec4 v)
{
    float val;
    vec4 o = vec4(1.0);

    float r = length(v.xyz);
    float theta = acos(v.z / r);

    if (theta <= FOV / 180.0 * PI)
        return true;
    else
        return false;
}

/*************/
void main(void)
{
    if (gl_InvocationID == 0)
    {
        if (vPass == 0)
        {
            vec4 p0 = gl_in[0].gl_Position;
            vec4 p1 = gl_in[1].gl_Position;
            vec4 p2 = gl_in[2].gl_Position;

            // If a face is entirely invisible, there is no need to subdivide it
            bool isFaceVisible = false;
            for (int i = 0; i < 3; ++i)
                isFaceVisible = isFaceVisible || isVisible(gl_in[i].gl_Position);

            if (isFaceVisible)
            {
                float l1 = distance(p0, p1);
                float l2 = distance(p1, p2);
                float l3 = distance(p2, p0);

                float d1 = length((p0 + p1).xyz) / 2.0;
                float d2 = length((p1 + p2).xyz) / 2.0;
                float d3 = length((p2 + p0).xyz) / 2.0;

                // TODO: Prefered method (yet)
                #define INNER_TESS_COEFF 20.0
                #define OUTER_TESS_COEFF 6.0
                vec4 center = (p0 + p1 + p2) / 3.0;
                float faceDistance = length(center);
                float faceSValue = (l1 + l2 + l3) / 2.0;
                float faceArea = sqrt(faceSValue * (faceSValue - l1) * (faceSValue - l2) * (faceSValue - l3));

                gl_TessLevelInner[0] = INNER_TESS_COEFF / (faceDistance * faceDistance) * faceArea;
                gl_TessLevelOuter[0] = OUTER_TESS_COEFF / d2 * l2;
                gl_TessLevelOuter[1] = OUTER_TESS_COEFF / d3 * l3;
                gl_TessLevelOuter[2] = OUTER_TESS_COEFF / d1 * l1;
            }
            else
            {
                gl_TessLevelInner[0] = 1.0;
                gl_TessLevelOuter[0] = 1.0;
                gl_TessLevelOuter[1] = 1.0;
                gl_TessLevelOuter[2] = 1.0;
            }
        }
        else
        {
            gl_TessLevelInner[0] = 1.0;
            gl_TessLevelOuter[0] = 1.0;
            gl_TessLevelOuter[1] = 1.0;
            gl_TessLevelOuter[2] = 1.0;
        }
    }

    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
    tcs_out[gl_InvocationID].texCoord = tcs_in[gl_InvocationID].texCoord;
    tcs_out[gl_InvocationID].normal = tcs_in[gl_InvocationID].normal;
}
